% gen_dl_agent.erl
% the generic dripline agent behavior.  this behavior encapsulates an
% agent which, upon starting successfully, attaches to the dripline 
% softbus.
-module(gen_dl_agent).

% We are wrapping gen_server, and adding a callback for when handle_info
% gets a dripline softbus message.
-behavior(gen_server).

% The behavior info
-export([behavior_info/1]).

-export([init/1,start_link/2]).

% We use init/1 to register with gproc, and handle_sb_msg is the special
% handling function for dripline softbus messages.
behavior_info(callbacks) ->
    [
     {init,1},
     {handle_sb_msg,2}
    ].

% Links as part of a supervision tree.
start_link(ID, Args) ->
    gen_server:start_link({local, ID}, ?MODULE, [ID|Args], []).

init([_ID|T]=Args) ->
    case ?MODULE:init(Args) of
	{ok, _StateData} ->
	    true = gproc:reg({p, l, agents});	   
	StartFailed ->
	    StartFailed
    end.

handle_info({dl_sb_msg, Msg}, StateData) ->
    ?MODULE:handle_sb_msg(Msg, StateData).
